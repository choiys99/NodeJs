node.js는 v8이라는 자바스크립트 엔진과 비동기 작업을 처리하는 libuv라는 라이브러리로 구성

v8에는 memory heap과 하나의 call stack이 있다
call stack은 코드 실행에 따라 호출 스택이 쌓인다. call stack은 차례대로 실행되기 때문에 비동기 처리를 할 수 없다.

비동기 작업을 가능하게 하는 것은 바로 libuv라는 라이브러리에서 non-blocking IO라는 기능을 가능하게 하는 이벤트 루프를 제공
libuv는 c언어로 생성되었고, 시스템 커넬을 이용하는데, 커넬은 멀티 스레드를 이용한다. 
따라서, node.js는 libuv가 멀티 스레드로 동작하기 때문에 비동기 처리를 할 수 있다.

STEP 1
node.js API로 요청이 들어오면, 들어온 요청은 event queue에 추가된다.

STEP 2
node.js의 이벤트 루프는 event queue를 살펴, 들어온 요청이 있다면 선착순으로 (first come first served) 요청이 처리된다.

STEP 3
요청은 internal C++ Thread Pool로 보내진다. 이것은 Libuv에서 개발된 이벤트 루프의 일부로 여러 요청을 수행할 수 있다. 동시에 이벤트 루프는 event queue에 요청이 있는지 계속해서 확인한다. 요청이 있다면 thread pool로 가져온다.

STEP 4
thread pool은 db 또는 file 또는 다른 서버 등에 보낸 요청을 수행한다.

STEP 5
수행을 마치면, 콜백 함수를 실행시켜 이벤트 루프로 응답을 전달한다.

STEP 6
이벤트 루프는 응답을 클라이언트에 보낸다. (요청-응답 끝)